/* Copyright 2016 Google Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.api.codegen.discovery;

import com.fasterxml.jackson.databind.JsonNode;
import com.google.api.codegen.discovery.transformer.SampleTransformer;
import com.google.api.codegen.discovery.transformer.csharp.CSharpSampleTransformer;
import com.google.api.codegen.rendering.CommonSnippetSetRunner;
import com.google.api.codegen.util.CommonRenderingUtil;
import com.google.common.collect.ImmutableMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang3.NotImplementedException;

/*
 * Creates DiscoveryProvider instances based on an ID.
 */
public class MainDiscoveryProviderFactory implements DiscoveryProviderFactory {

  private static final String CSHARP = "csharp";
  private static final String GO = "go";
  private static final String JAVA = "java";
  private static final String JS = "js";
  private static final String NODEJS = "nodejs";
  private static final String PHP = "php";
  private static final String PYTHON = "python";
  private static final String RUBY = "ruby";

  private static final Map<String, Class<? extends SampleTransformer>>
      SAMPLE_METHOD_TO_VIEW_TRANSFORMER_MAP =
          ImmutableMap.<String, Class<? extends SampleTransformer>>builder()
              .put(CSHARP, CSharpSampleTransformer.class)
              .build();

  public static DiscoveryProvider defaultCreate(
      Document document, List<JsonNode> overrides, String lang) {
    SampleTransformer sampleMethodToViewTransformer;
    try {
      sampleMethodToViewTransformer = SAMPLE_METHOD_TO_VIEW_TRANSFORMER_MAP.get(lang).newInstance();
    } catch (InstantiationException | IllegalAccessException e) {
      throw new RuntimeException(e);
    }
    if (sampleMethodToViewTransformer == null) {
      throw new NotImplementedException(
          "MainDiscoveryProviderFactory: invalid id \"" + lang + "\"");
    }

    return ViewModelProvider.newBuilder()
        .setDocument(document)
        .setSnippetSetRunner(new CommonSnippetSetRunner(new CommonRenderingUtil()))
        .setMethodToViewTransformer(sampleMethodToViewTransformer)
        .setOverrides(overrides)
        .setOutputRoot(
            "autogenerated/"
                + document.name()
                + "/"
                + document.version()
                + "/"
                + document.revision())
        .build();
  }

  @Override
  public DiscoveryProvider create(Document document, List<JsonNode> overrides, String lang) {
    return defaultCreate(document, overrides, lang);
  }
}
