@snippet generate(class)
    // BEFORE RUNNING:
    // ---------------
    // 1. If not already done, enable the {@class.apiInfo.title}
    //    and check the quota for your project at
    //    https://console.developers.google.com/apis/api/{@class.apiInfo.name}
    @switch class.apiInfo.authType
    @case "ADC"
        // 2. This sample uses Application Default Credentials for authentication.
        //    If not already done, install the gcloud CLI from
        //    https://cloud.google.com/sdk and run
        //    `gcloud beta auth application-default login`.
        //    For more information, see
        //    https://developers.google.com/identity/protocols/application-default-credentials
        // 3. Install the C# client library by adding a dependency on the relevant NuGet
        //    package. Libraries published by Google are owned by google-apis-packages:
        //    https://www.nuget.org/profiles/google-apis-packages
    @default
        // 2. Install the C# client library by adding a dependency on the relevant NuGet
        //    package. Libraries published by Google are owned by google-apis-packages:
        //    https://www.nuget.org/profiles/google-apis-packages
    @end

    @join usingDirective : class.usingDirectives
        using {@usingDirective.namespaceName};
    @end
    @if class.usingAliasDirectives

        @join usingAliasDirective : class.usingAliasDirectives
            using {@usingAliasDirective.alias} = {@usingAliasDirective.namespaceName};
        @end
    @end

    namespace {@class.sampleNamespaceName}
    {
        public class {@class.sampleClassName}
        {
            public static void Main(string[] args)
            {
                {@class.service.typeName} {@class.service.varName} = new {@class.service.typeName}(new BaseClientService.Initializer
                {
                    @if class.apiInfo.authType == "API_KEY"
                        ApiKey = "",  // TODO: Update placeholder with desired API key.
                    @else
                        HttpClientInitializer = GetCredential(),
                    @end
                    ApplicationName: "{@class.appName}"
                }
                @join parameter : class.parameters if class.parameters

                    @if parameter.description
                        @join line : util.getDocLines(parameter.description, 100)
                            // {@line}
                        @end


                    @end
                    {@parameter.typeName} {@parameter.varName} = {@parameter.value};  // TODO: Update placeholder value.
                @end
                @if class.methodInfo.hasRequestBody

                    @switch class.methodInfo.verb
                    @case "PATCH"
                        // TODO: Assign values to desired properties of `{@class.requestBody.varName}`. Only assigned
                        // properties will be changed:
                    @case "PUT"
                        // TODO: Assign values to desired properties of `{@class.requestBody.varName}`. All existing
                        // properties will be replaced:
                    @default
                        // TODO: Assign values to desired properties of `{@class.requestBody.varName}`:
                    @end
                    {@class.requestBody.typeName} {@class.requestBody.varName} = {@class.requestBody.value};

                @end
                @if class.methodInfo.supportsMediaUpload
                    // TODO: Add desired media content for upload. See
                    // https://developers.google.com/api-client-library/dotnet/guide/media_upload

                @end
                {@class.request.typeName} {@class.request.varName} = {@class.service.varName}.{@class.serviceRequestFullFuncName}({@argList(class.parameters)});

                @if class.methodInfo.supportsMediaDownload
                    // TODO: Download media content if desired. See
                    // https://developers.google.com/api-client-library/dotnet/guide/media_download

                @end
            }
        }
    }
@end

@private argList(parameters)
  @join parameter : parameters on ", "
    {@parameter}.varName
  @end
@end